{
  "address": "0xC31D9ec590752e891a91b64f1afD03bAED457976",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dataStoreAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "namehash",
          "type": "bytes32"
        }
      ],
      "name": "TakedownAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        }
      ],
      "name": "addToRestrictWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "namehash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct INameManager.Takedown[]",
          "name": "takedowns",
          "type": "tuple[]"
        }
      ],
      "name": "addToTakedownList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "contract IJNSAdminContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashedRestrictWords",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashedTakedownList",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "namehash",
          "type": "bytes32"
        }
      ],
      "name": "isNamehashTakendown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenIdTakendown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "word",
          "type": "string"
        }
      ],
      "name": "isWordRestricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "word",
          "type": "string"
        }
      ],
      "name": "isWordWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        }
      ],
      "name": "removeFromRestrictWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "namehash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct INameManager.Takedown[]",
          "name": "takedowns",
          "type": "tuple[]"
        }
      ],
      "name": "removeFromTakedownList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f9935b687ca21a3a36d902bed4a04f8cc695abf83857abb04ab2a4d295ab314",
  "receipt": {
    "to": null,
    "from": "0x26c0d1c4F49C59ACc3E818749758917bBe946d06",
    "contractAddress": "0xC31D9ec590752e891a91b64f1afD03bAED457976",
    "transactionIndex": 0,
    "gasUsed": "1098488",
    "logsBloom": "0x
    "blockHash": "0xb1294b986fd6a1d0ee0d7456da24b4a257bf1324927beac4b3a33b893afe7d12",
    "transactionHash": "0x4f9935b687ca21a3a36d902bed4a04f8cc695abf83857abb04ab2a4d295ab314",
    "logs": [],
    "blockNumber": 18267865,
    "cumulativeGasUsed": "1098488",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1A18C4699273746c335d2d97fBa51E638f080B2E",
    "0x8bE7B6F784C89beB5Fa107B2Bd021D31F8B1BABB"
  ],
  "numDeployments": 1,
  "solcInputHash": "d69af7ebb9af7866df34efb40b2e6557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataStoreAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"name\":\"TakedownAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"}],\"name\":\"addToRestrictWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"internalType\":\"struct INameManager.Takedown[]\",\"name\":\"takedowns\",\"type\":\"tuple[]\"}],\"name\":\"addToTakedownList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"contract IJNSAdminContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashedRestrictWords\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashedTakedownList\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"name\":\"isNamehashTakendown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenIdTakendown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"name\":\"isWordRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"name\":\"isWordWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"}],\"name\":\"removeFromRestrictWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"internalType\":\"struct INameManager.Takedown[]\",\"name\":\"takedowns\",\"type\":\"tuple[]\"}],\"name\":\"removeFromTakedownList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"jns-admin-contract/contracts/NameManager.sol\":\"NameManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/IAccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC165 detection.\\n *\\n * _Available since v4.9._\\n */\\ninterface IAccessControlDefaultAdminRules is IAccessControl {\\n    /**\\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\\n     * passes.\\n     */\\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\\n     */\\n    event DefaultAdminTransferCanceled();\\n\\n    /**\\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\\n     */\\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\\n     */\\n    event DefaultAdminDelayChangeCanceled();\\n\\n    /**\\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\\n     */\\n    function defaultAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\\n     *\\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\\n     *\\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\\n     *\\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\\n     */\\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\\n     *\\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\\n     * the acceptance schedule.\\n     *\\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\\n     * function returns the new delay. See {changeDefaultAdminDelay}.\\n     */\\n    function defaultAdminDelay() external view returns (uint48);\\n\\n    /**\\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\\n     *\\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\\n     *\\n     * A zero value only in `effectSchedule` indicates no pending delay change.\\n     *\\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\\n     * will be zero after the effect schedule.\\n     */\\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\\n     * after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminRoleChangeStarted event.\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) external;\\n\\n    /**\\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function cancelDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * After calling the function:\\n     *\\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\\n     * - {pendingDefaultAdmin} should be reset to zero values.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\\n     */\\n    function acceptDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\\n     * set before calling.\\n     *\\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\\n     * complete transfer (including acceptance).\\n     *\\n     * The schedule is designed for two scenarios:\\n     *\\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\\n     * {defaultAdminDelayIncreaseWait}.\\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\\n     *\\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) external;\\n\\n    /**\\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function rollbackDefaultAdminDelay() external;\\n\\n    /**\\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\\n     * to take effect. Default to 5 days.\\n     *\\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\\n     *\\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\\n     */\\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\\n}\\n\",\"keccak256\":\"0x4025f2c243843858eba5f4588189430189a6712f12183d9b4e2e876550428a0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/IJNSAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/access/IAccessControlDefaultAdminRules.sol\\\";\\nimport \\\"./INameManager.sol\\\";\\n\\ninterface IJNSAdminContract is IAccessControlDefaultAdminRules {\\n    function changeRecipientAddress(\\n        address payable newWithdrawalAddress\\n    ) external;\\n\\n    function changeOracleAddress(address newOracleAddress) external;\\n\\n    function setNameManagerAddress(INameManager newNameManagerAddress) external;\\n\\n    function oracleAddress() external view returns (address);\\n\\n    function setRentPrices(uint256[] calldata rentPrices) external;\\n\\n    function getRentPrices() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x412bb84a1163d8cfdf21618911b379ff9339d9c46941a56a8a229e3b8fa06e21\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/INameManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface INameManager {\\n    struct Takedown {\\n        uint256 tokenId; // JNS Token ID\\n        bytes32 namehash; // JNS Namehash\\n    }\\n\\n    function addToTakedownList(Takedown[] calldata tokenIds) external;\\n\\n    function removeFromTakedownList(Takedown[] calldata tokenIds) external;\\n\\n    function addToRestrictWords(string[] calldata words) external;\\n\\n    function removeFromRestrictWords(string[] calldata words) external;\\n\\n    function hashedTakedownList() external view returns (bytes32[] memory);\\n\\n    function hashedRestrictWords() external view returns (bytes32[] memory);\\n\\n    function isWordWhitelisted(\\n        string calldata word\\n    ) external view returns (bool);\\n\\n    function isWordRestricted(string memory word) external view returns (bool);\\n\\n    function isValid(string calldata name) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54e30b3c3f7cf391d72b95e1bb79e74f3dd71d7193cc4c7a5091d4b66072d62f\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/NameManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./IJNSAdminContract.sol\\\";\\nimport \\\"./INameManager.sol\\\";\\nimport \\\"./NameManagerDataStore.sol\\\";\\n\\ncontract NameManager is INameManager {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 public constant NAME_MANAGER_ROLE = keccak256(\\\"NAME_MANAGER_ROLE\\\");\\n\\n    IJNSAdminContract public adminContract;\\n    NameManagerDataStore private dataStore;\\n\\n    event TakedownAdded(bytes32 indexed tokenId, bytes32 indexed namehash);\\n\\n    constructor(address _adminContractAddress, address _dataStoreAddress) {\\n        require(\\n            _adminContractAddress != address(0),\\n            \\\"Admin contract address cannot be the zero address\\\"\\n        );\\n        require(\\n            _dataStoreAddress != address(0),\\n            \\\"Data store address cannot be the zero address\\\"\\n        );\\n\\n        adminContract = IJNSAdminContract(_adminContractAddress);\\n        dataStore = NameManagerDataStore(_dataStoreAddress);\\n    }\\n\\n    modifier onlyNameManager() {\\n        require(\\n            adminContract.hasRole(NAME_MANAGER_ROLE, msg.sender),\\n            \\\"Caller is not a name manager\\\"\\n        );\\n        _;\\n    }\\n\\n    function isWordWhitelisted(\\n        string calldata word\\n    ) public view returns (bool) {\\n        bytes memory wordBytes = bytes(word);\\n        for (uint32 i = 0; i < wordBytes.length; i++) {\\n            uint32 charCode = uint32(uint8(wordBytes[i]));\\n            if (!dataStore.isWhitelistCharacter(charCode)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function isValid(string calldata name) public view returns (bool) {\\n        return isWordWhitelisted(name) && !isWordRestricted(name);\\n    }\\n\\n    // TODO: comment here\\n    function addToTakedownList(\\n        Takedown[] calldata takedowns\\n    ) external onlyNameManager {\\n        for (uint i = 0; i < takedowns.length; ++i) {\\n            dataStore.addTakedown(bytes32(takedowns[i].tokenId));\\n            bytes32 nameHash = keccak256(\\n                abi.encodePacked(takedowns[i].namehash)\\n            );\\n            dataStore.addTakedown(nameHash);\\n\\n            emit TakedownAdded(bytes32(takedowns[i].tokenId), nameHash);\\n        }\\n    }\\n\\n    // TODO: comment here\\n    function removeFromTakedownList(\\n        Takedown[] calldata takedowns\\n    ) external onlyNameManager {\\n        for (uint i = 0; i < takedowns.length; ++i) {\\n            dataStore.removeTakedown(bytes32(takedowns[i].tokenId));\\n            dataStore.removeTakedown(\\n                keccak256(abi.encodePacked(takedowns[i].namehash))\\n            );\\n        }\\n    }\\n\\n    // TODO: comment here\\n    function isTokenIdTakendown(uint256 tokenId) public view returns (bool) {\\n        return dataStore.isTakedown(bytes32(tokenId));\\n    }\\n\\n    // TODO: comment here\\n    function isNamehashTakendown(bytes32 namehash) public view returns (bool) {\\n        return dataStore.isTakedown(namehash);\\n    }\\n\\n    function addToRestrictWords(\\n        string[] calldata words\\n    ) external onlyNameManager {\\n        for (uint i = 0; i < words.length; ++i) {\\n            bytes32 wordHash = keccak256(abi.encodePacked(words[i]));\\n            dataStore.addRestrictedWord(wordHash);\\n        }\\n    }\\n\\n    function removeFromRestrictWords(\\n        string[] calldata words\\n    ) external onlyNameManager {\\n        for (uint i = 0; i < words.length; ++i) {\\n            bytes32 wordHash = keccak256(abi.encodePacked(words[i]));\\n\\n            dataStore.removeRestrictedWord(wordHash);\\n        }\\n    }\\n\\n    function isWordRestricted(string memory word) public view returns (bool) {\\n        return dataStore.isRestrictedWord(keccak256(abi.encodePacked(word)));\\n    }\\n\\n    function hashedTakedownList() public view returns (bytes32[] memory) {\\n        return dataStore.getHashedTakenDownList();\\n    }\\n\\n    function hashedRestrictWords() public view returns (bytes32[] memory) {\\n        return dataStore.getHashedRestrictedWords();\\n    }\\n\\n    function _removeStringFromArray(\\n        string[] storage array,\\n        string memory value\\n    ) private {\\n        for (uint i = 0; i < array.length; i++) {\\n            if (keccak256(bytes(array[i])) == keccak256(bytes(value))) {\\n                array[i] = array[array.length - 1];\\n                array.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7753a657e15b50be6027ee262e060ba181c0484f687cd8e99f11d0e24ae949a4\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/NameManagerDataStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./IJNSAdminContract.sol\\\";\\n\\ncontract NameManagerDataStore {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 public constant NAME_MANAGER_ROLE = keccak256(\\\"NAME_MANAGER_ROLE\\\");\\n\\n    mapping(uint32 => bool) public whitelistCharacters;\\n    EnumerableSet.Bytes32Set private takedownSet;\\n    EnumerableSet.Bytes32Set private restrictWordSet;\\n\\n    IJNSAdminContract public adminContract;\\n\\n    constructor(address _adminContractAddress) {\\n        require(\\n            _adminContractAddress != address(0),\\n            \\\"Admin contract address cannot be the zero address\\\"\\n        );\\n\\n        adminContract = IJNSAdminContract(_adminContractAddress);\\n\\n        _whitelistCharactersAndNumbers();\\n    }\\n\\n    modifier onlyNameManager() {\\n        require(\\n            adminContract.hasRole(NAME_MANAGER_ROLE, msg.sender),\\n            \\\"Caller is not a name manager\\\"\\n        );\\n        _;\\n    }\\n\\n    function addWhitelistCharacter(uint32 character) external onlyNameManager {\\n        whitelistCharacters[character] = true;\\n    }\\n\\n    function removeWhitelistCharacter(\\n        uint32 character\\n    ) external onlyNameManager {\\n        whitelistCharacters[character] = false;\\n    }\\n\\n    function isWhitelistCharacter(uint32 character) public view returns (bool) {\\n        return whitelistCharacters[character];\\n    }\\n\\n    function addTakedown(bytes32 hash) external onlyNameManager {\\n        takedownSet.add(hash);\\n    }\\n\\n    function removeTakedown(bytes32 hash) external onlyNameManager {\\n        takedownSet.remove(hash);\\n    }\\n\\n    function addRestrictedWord(bytes32 hash) external onlyNameManager {\\n        restrictWordSet.add(hash);\\n    }\\n\\n    function removeRestrictedWord(bytes32 hash) external onlyNameManager {\\n        restrictWordSet.remove(hash);\\n    }\\n\\n    function isRestrictedWord(bytes32 hash) public view returns (bool) {\\n        return restrictWordSet.contains(hash);\\n    }\\n\\n    function isTakedown(bytes32 hash) public view returns (bool) {\\n        return takedownSet.contains(hash);\\n    }\\n\\n    function getHashedTakenDownList() public view returns (bytes32[] memory) {\\n        return takedownSet.values();\\n    }\\n\\n    function getHashedRestrictedWords() public view returns (bytes32[] memory) {\\n        return restrictWordSet.values();\\n    }\\n\\n    function _whitelistCharactersAndNumbers() private {\\n        // Unicode values for '0' to '9' are 48 to 57\\n        for (uint32 i = 48; i <= 57; i++) {\\n            whitelistCharacters[i] = true;\\n        }\\n        // Unicode values for 'a' to 'z' are 97 to 122\\n        for (uint32 i = 97; i <= 122; i++) {\\n            whitelistCharacters[i] = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf1b62c36237ce4a32a0edbc2a061c0ad0b3096c9c3fd1e2dcfe061a9c1318f47\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620013b8380380620013b88339810160408190526100319161015f565b6001600160a01b0382166100a65760405162461bcd60e51b815260206004820152603160248201527f41646d696e20636f6e747261637420616464726573732063616e6e6f7420626560448201527020746865207a65726f206164647265737360781b60648201526084015b60405180910390fd5b6001600160a01b0381166101125760405162461bcd60e51b815260206004820152602d60248201527f446174612073746f726520616464726573732063616e6e6f742062652074686560448201526c207a65726f206164647265737360981b606482015260840161009d565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055610192565b80516001600160a01b038116811461015a57600080fd5b919050565b6000806040838503121561017257600080fd5b61017b83610143565b915061018960208401610143565b90509250929050565b61121680620001a26000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638c6e9d661161008c578063c05c5e9411610066578063c05c5e94146101b7578063eb00d164146101e2578063f1dfaefb146101f5578063f824dc0b1461020857600080fd5b80638c6e9d66146101915780638f4e3f2a146101a4578063aee6ac6f1461017e57600080fd5b80636829b652116100bd5780636829b652146101565780637e9ac7e11461016b5780638014a0721461017e57600080fd5b80631be0e195146100e457806343db268d1461011e5780636264659314610133575b600080fd5b61010b7f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d81565b6040519081526020015b60405180910390f35b610126610210565b6040516101159190610db2565b610146610141366004610df6565b6102a0565b6040519015158152602001610115565b610169610164366004610e68565b6103c6565b005b610169610179366004610ecb565b610602565b61014661018c366004610f2e565b6107c2565b61016961019f366004610ecb565b61084a565b6101696101b2366004610e68565b610a0a565b6000546101ca906001600160a01b031681565b6040516001600160a01b039091168152602001610115565b6101466101f0366004610f8e565b610c99565b610146610203366004610df6565b610cf4565b610126610d4f565b600154604080517fea8fc60000000000000000000000000000000000000000000000000000000000815290516060926001600160a01b03169163ea8fc6009160048083019260009291908290030181865afa158015610273573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261029b9190810190611023565b905090565b60008083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b81518163ffffffff1610156103b9576000828263ffffffff1681518110610305576103056110c9565b01602001516001546040517f165c05ad00000000000000000000000000000000000000000000000000000000815260f89290921c6004830181905292506001600160a01b03169063165c05ad90602401602060405180830381865afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039691906110df565b6103a657600093505050506103c0565b50806103b181611117565b9150506102dc565b5060019150505b92915050565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906110df565b6104a95760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e616765720000000060448201526064015b60405180910390fd5b60005b818110156105fd576001546001600160a01b0316638dc465b28484848181106104d7576104d76110c9565b6040805160e086901b7fffffffff00000000000000000000000000000000000000000000000000000000168152910290920135600483015250602401600060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b50506001546001600160a01b03169150638dc465b2905084848481811061056a5761056a6110c9565b9050604002016020013560405160200161058691815260200190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016105ba91815260200190565b600060405180830381600087803b1580156105d457600080fd5b505af11580156105e8573d6000803e3d6000fd5b50505050806105f69061113a565b90506104ac565b505050565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610670573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069491906110df565b6106e05760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e616765720000000060448201526064016104a0565b60005b818110156105fd5760008383838181106106ff576106ff6110c9565b90506020028101906107119190611153565b6040516020016107229291906111a1565b60408051808303601f190181529082905280516020909101206001547f8aba607d000000000000000000000000000000000000000000000000000000008352600483018290529092506001600160a01b031690638aba607d90602401600060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b5050505050806107bb9061113a565b90506106e3565b6001546040517f0393533e000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690630393533e906024015b602060405180830381865afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c091906110df565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156108b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dc91906110df565b6109285760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e616765720000000060448201526064016104a0565b60005b818110156105fd576000838383818110610947576109476110c9565b90506020028101906109599190611153565b60405160200161096a9291906111a1565b60408051808303601f190181529082905280516020909101206001547fe1e403e1000000000000000000000000000000000000000000000000000000008352600483018290529092506001600160a01b03169063e1e403e190602401600060405180830381600087803b1580156109e057600080fd5b505af11580156109f4573d6000803e3d6000fd5b505050505080610a039061113a565b905061092b565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c91906110df565b610ae85760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e616765720000000060448201526064016104a0565b60005b818110156105fd576001546001600160a01b031663610ece95848484818110610b1657610b166110c9565b6040805160e086901b7fffffffff00000000000000000000000000000000000000000000000000000000168152910290920135600483015250602401600060405180830381600087803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b505050506000838383818110610b9857610b986110c9565b90506040020160200135604051602001610bb491815260200190565b60408051808303601f190181529082905280516020909101206001547f610ece95000000000000000000000000000000000000000000000000000000008352600483018290529092506001600160a01b03169063610ece9590602401600060405180830381600087803b158015610c2a57600080fd5b505af1158015610c3e573d6000803e3d6000fd5b5050505080848484818110610c5557610c556110c9565b6040805191029290920135917fd0b7e0b41631f30106295c83cff43644dafdba6e9f5c27bab5c6b4a8c17ee77c9150600090a350610c928161113a565b9050610aeb565b6001546040516000916001600160a01b03169063deb68ebd90610cc09085906020016111b1565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161080991815260200190565b6000610d0083836102a0565b8015610d485750610d4683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c9992505050565b155b9392505050565b600154604080517f25f6748500000000000000000000000000000000000000000000000000000000815290516060926001600160a01b0316916325f674859160048083019260009291908290030181865afa158015610273573d6000803e3d6000fd5b6020808252825182820181905260009190848201906040850190845b81811015610dea57835183529284019291840191600101610dce565b50909695505050505050565b60008060208385031215610e0957600080fd5b823567ffffffffffffffff80821115610e2157600080fd5b818501915085601f830112610e3557600080fd5b813581811115610e4457600080fd5b866020828501011115610e5657600080fd5b60209290920196919550909350505050565b60008060208385031215610e7b57600080fd5b823567ffffffffffffffff80821115610e9357600080fd5b818501915085601f830112610ea757600080fd5b813581811115610eb657600080fd5b8660208260061b8501011115610e5657600080fd5b60008060208385031215610ede57600080fd5b823567ffffffffffffffff80821115610ef657600080fd5b818501915085601f830112610f0a57600080fd5b813581811115610f1957600080fd5b8660208260051b8501011115610e5657600080fd5b600060208284031215610f4057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f8657610f86610f47565b604052919050565b60006020808385031215610fa157600080fd5b823567ffffffffffffffff80821115610fb957600080fd5b818501915085601f830112610fcd57600080fd5b813581811115610fdf57610fdf610f47565b610ff1601f8201601f19168501610f5d565b9150808252868482850101111561100757600080fd5b8084840185840137600090820190930192909252509392505050565b6000602080838503121561103657600080fd5b825167ffffffffffffffff8082111561104e57600080fd5b818501915085601f83011261106257600080fd5b81518181111561107457611074610f47565b8060051b9150611085848301610f5d565b818152918301840191848101908884111561109f57600080fd5b938501935b838510156110bd578451825293850193908501906110a4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156110f157600080fd5b81518015158114610d4857600080fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681810361113057611130611101565b6001019392505050565b60006001820161114c5761114c611101565b5060010190565b6000808335601e1984360301811261116a57600080fd5b83018035915067ffffffffffffffff82111561118557600080fd5b60200191503681900382131561119a57600080fd5b9250929050565b8183823760009101908152919050565b6000825160005b818110156111d257602081860181015185830152016111b8565b50600092019182525091905056fea264697066735822122067c9588c0d6489b1b633c975a565a64ae31f58eb7c87b8d9c07ac5038c07fc6464736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30385,
        "contract": "jns-admin-contract/contracts/NameManager.sol:NameManager",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IJNSAdminContract)29985"
      },
      {
        "astId": 30388,
        "contract": "jns-admin-contract/contracts/NameManager.sol:NameManager",
        "label": "dataStore",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NameManagerDataStore)31083"
      }
    ],
    "types": {
      "t_contract(IJNSAdminContract)29985": {
        "encoding": "inplace",
        "label": "contract IJNSAdminContract",
        "numberOfBytes": "20"
      },
      "t_contract(NameManagerDataStore)31083": {
        "encoding": "inplace",
        "label": "contract NameManagerDataStore",
        "numberOfBytes": "20"
      }
    }
  }
}