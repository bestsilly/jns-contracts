{
  "address": "0x68c34bE7101104B4F09de1EFAFDC800f7D0e4aBb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dataStoreAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NAME_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        }
      ],
      "name": "addToRestrictWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "namehash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct INameManager.Takedown[]",
          "name": "takedowns",
          "type": "tuple[]"
        }
      ],
      "name": "addToTakedownList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminContract",
      "outputs": [
        {
          "internalType": "contract IJNSAdminContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashedRestrictWords",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashedTakedownList",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isNameTakendown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "namehash",
          "type": "bytes32"
        }
      ],
      "name": "isNamehashTakendown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenIdTakendown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "word",
          "type": "string"
        }
      ],
      "name": "isWordRestricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "word",
          "type": "string"
        }
      ],
      "name": "isWordWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "words",
          "type": "string[]"
        }
      ],
      "name": "removeFromRestrictWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "namehash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct INameManager.Takedown[]",
          "name": "takedowns",
          "type": "tuple[]"
        }
      ],
      "name": "removeFromTakedownList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a8c5d48c88976e2c3bd6b7adcac4eba52f690a242793000bbc054cda0330182",
  "receipt": {
    "to": null,
    "from": "0x26c0d1c4F49C59ACc3E818749758917bBe946d06",
    "contractAddress": "0x68c34bE7101104B4F09de1EFAFDC800f7D0e4aBb",
    "transactionIndex": 0,
    "gasUsed": "1174733",
    "logsBloom": "0x
    "blockHash": "0xc35847ac0f80756a08cc45ced31bf70495d557c5fba2d399324224cca96a5189",
    "transactionHash": "0x7a8c5d48c88976e2c3bd6b7adcac4eba52f690a242793000bbc054cda0330182",
    "logs": [],
    "blockNumber": 18280448,
    "cumulativeGasUsed": "1174733",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE3931c3d7f0BEc38da27F47dff076ba4b534c182",
    "0xc7460fD11A8bFCB86BEB2399Cc8706E7b7c3eff6"
  ],
  "numDeployments": 1,
  "solcInputHash": "16de868579f5f265b67830d866201f11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataStoreAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NAME_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"}],\"name\":\"addToRestrictWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"internalType\":\"struct INameManager.Takedown[]\",\"name\":\"takedowns\",\"type\":\"tuple[]\"}],\"name\":\"addToTakedownList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminContract\",\"outputs\":[{\"internalType\":\"contract IJNSAdminContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashedRestrictWords\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashedTakedownList\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isNameTakendown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"name\":\"isNamehashTakendown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenIdTakendown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"name\":\"isWordRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"word\",\"type\":\"string\"}],\"name\":\"isWordWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"words\",\"type\":\"string[]\"}],\"name\":\"removeFromRestrictWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"internalType\":\"struct INameManager.Takedown[]\",\"name\":\"takedowns\",\"type\":\"tuple[]\"}],\"name\":\"removeFromTakedownList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToRestrictWords(string[])\":{\"details\":\"Adds words (without .jfin) to the list of restricted words.\",\"params\":{\"words\":\"Array of words to add to the restriction list.\"}},\"addToTakedownList((uint256,string,bytes32)[])\":{\"details\":\"Adds entries to the takedown list for both token ID and namehash.\",\"params\":{\"takedowns\":\"Array of takedown entries containing tokenId and namehash.\"}},\"constructor\":{\"details\":\"Initializes contract with addresses of admin and data storage contracts. Also pre-populates the whitelist with characters and numbers.\",\"params\":{\"_adminContractAddress\":\"Address of the admin contract.\",\"_dataStoreAddress\":\"Address of the data storage contract.\"}},\"hashedRestrictWords()\":{\"details\":\"Retrieves the list of all restricted word hashes from the data store.\",\"returns\":{\"_0\":\"An array of restricted word hashes.\"}},\"hashedTakedownList()\":{\"details\":\"Retrieves the list of all takedown hashes from the data store.\",\"returns\":{\"_0\":\"An array of takedown hashes.\"}},\"isNameTakendown(string)\":{\"details\":\"Checks if a name is currently marked for takedown.\",\"params\":{\"name\":\"The original name to check (without .jfin).\"},\"returns\":{\"_0\":\"True if the name is on the takedown list.\"}},\"isNamehashTakendown(bytes32)\":{\"details\":\"Checks if a namehash is currently marked for takedown.\",\"params\":{\"namehash\":\"The hash of the name to check.\"},\"returns\":{\"_0\":\"True if the namehash is on the takedown list.\"}},\"isTokenIdTakendown(uint256)\":{\"details\":\"Checks if a token ID is currently marked for takedown.\",\"params\":{\"tokenId\":\"The token ID to check.\"},\"returns\":{\"_0\":\"True if the token ID is on the takedown list.\"}},\"isValid(string)\":{\"details\":\"Determines if a name is valid based on whitelist, restriction and takedown checks.\",\"params\":{\"name\":\"The name to validate.\"},\"returns\":{\"_0\":\"True if the name is valid.\"}},\"isWordRestricted(string)\":{\"details\":\"Checks if a word (without .jfin) is currently marked as restricted.\",\"params\":{\"word\":\"The word to check.\"},\"returns\":{\"_0\":\"True if the word is on the restricted list.\"}},\"isWordWhitelisted(string)\":{\"details\":\"Checks if each character of a word is whitelisted.\",\"params\":{\"word\":\"The word to check.\"},\"returns\":{\"_0\":\"True if the word is made only of whitelisted characters.\"}},\"removeFromRestrictWords(string[])\":{\"details\":\"Removes words (without .jfin) from the list of restricted words.\",\"params\":{\"words\":\"Array of words to remove from the restriction list.\"}},\"removeFromTakedownList((uint256,string,bytes32)[])\":{\"details\":\"Removes entries from the takedown list for both token ID and namehash.\",\"params\":{\"takedowns\":\"Array of takedown entries containing tokenId and namehash.\"}}},\"title\":\"Name Management for a JFIN Name Service\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"jns-admin-contract/contracts/NameManager.sol\":\"NameManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/IAccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC165 detection.\\n *\\n * _Available since v4.9._\\n */\\ninterface IAccessControlDefaultAdminRules is IAccessControl {\\n    /**\\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\\n     * passes.\\n     */\\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\\n     */\\n    event DefaultAdminTransferCanceled();\\n\\n    /**\\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\\n     */\\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\\n     */\\n    event DefaultAdminDelayChangeCanceled();\\n\\n    /**\\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\\n     */\\n    function defaultAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\\n     *\\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\\n     *\\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\\n     *\\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\\n     */\\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\\n     *\\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\\n     * the acceptance schedule.\\n     *\\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\\n     * function returns the new delay. See {changeDefaultAdminDelay}.\\n     */\\n    function defaultAdminDelay() external view returns (uint48);\\n\\n    /**\\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\\n     *\\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\\n     *\\n     * A zero value only in `effectSchedule` indicates no pending delay change.\\n     *\\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\\n     * will be zero after the effect schedule.\\n     */\\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\\n     * after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminRoleChangeStarted event.\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) external;\\n\\n    /**\\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function cancelDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * After calling the function:\\n     *\\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\\n     * - {pendingDefaultAdmin} should be reset to zero values.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\\n     */\\n    function acceptDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\\n     * set before calling.\\n     *\\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\\n     * complete transfer (including acceptance).\\n     *\\n     * The schedule is designed for two scenarios:\\n     *\\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\\n     * {defaultAdminDelayIncreaseWait}.\\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\\n     *\\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) external;\\n\\n    /**\\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function rollbackDefaultAdminDelay() external;\\n\\n    /**\\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\\n     * to take effect. Default to 5 days.\\n     *\\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\\n     *\\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\\n     */\\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\\n}\\n\",\"keccak256\":\"0x4025f2c243843858eba5f4588189430189a6712f12183d9b4e2e876550428a0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/IJNSAdminContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/access/IAccessControlDefaultAdminRules.sol\\\";\\nimport \\\"./INameManager.sol\\\";\\n\\ninterface IJNSAdminContract is IAccessControlDefaultAdminRules {\\n    // recipient\\n    function changeRecipient(address payable recipient) external;\\n\\n    function recipientAddress() external view returns (address);\\n\\n    // oracle\\n    function changeOracle(address oracle) external;\\n\\n    function oracleAddress() external view returns (address);\\n\\n    // name manager\\n    function changeNameManager(INameManager nameManager) external;\\n\\n    function nameManagerAddress() external view returns (address);\\n\\n    // rent prices\\n    function changeRentPrices(uint256[] calldata rentPrices) external;\\n\\n    function getRentPrices() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xb5245c1868d44e9a8f111b49268dc3fc241c1ec2679c304d3813dc59f3cf488b\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/INameManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface INameManager {\\n    struct Takedown {\\n        uint256 tokenId; // JNS Token ID of NameWrapper\\n        string name; // Name (without .jfin)\\n        bytes32 namehash; // JNS Namehash\\n    }\\n\\n    // global check\\n    function isValid(string calldata name) external view returns (bool);\\n\\n    // characters whitelisting\\n    function isWordWhitelisted(string calldata word) external view returns (bool);\\n\\n    // restricted words\\n    function addToRestrictWords(string[] calldata words) external;\\n\\n    function removeFromRestrictWords(string[] calldata words) external;\\n\\n    function hashedRestrictWords() external view returns (bytes32[] memory);\\n\\n    function isWordRestricted(string memory word) external view returns (bool);\\n\\n    // takedown list\\n    function addToTakedownList(Takedown[] calldata tokenIds) external;\\n\\n    function removeFromTakedownList(Takedown[] calldata tokenIds) external;\\n\\n    function hashedTakedownList() external view returns (bytes32[] memory);\\n\\n    function isTokenIdTakendown(uint256 tokenId) external view returns (bool);\\n\\n    function isNameTakendown(string memory name) external view returns (bool);\\n\\n    function isNamehashTakendown(bytes32 namehash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25ae0aa65451357090d6c356e5fb26dab47816964ec79070c505e33f12a89cf5\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/NameManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./IJNSAdminContract.sol\\\";\\nimport \\\"./INameManager.sol\\\";\\nimport \\\"./NameManagerDataStore.sol\\\";\\n\\n/// @title Name Management for a JFIN Name Service\\ncontract NameManager is INameManager {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 public constant NAME_MANAGER_ROLE = keccak256(\\\"NAME_MANAGER_ROLE\\\");\\n\\n    IJNSAdminContract public adminContract;\\n    NameManagerDataStore private dataStore;\\n\\n    /// @dev Initializes contract with addresses of admin and data storage contracts. Also pre-populates the whitelist with characters and numbers.\\n    /// @param _adminContractAddress Address of the admin contract.\\n    /// @param _dataStoreAddress Address of the data storage contract.\\n    constructor(address _adminContractAddress, address _dataStoreAddress) {\\n        adminContract = IJNSAdminContract(_adminContractAddress);\\n        dataStore = NameManagerDataStore(_dataStoreAddress);\\n    }\\n\\n    /// @dev Restricts function access to accounts with the Name Manager role.\\n    modifier onlyNameManager() {\\n        require(\\n            adminContract.hasRole(NAME_MANAGER_ROLE, msg.sender),\\n            \\\"Caller is not a name manager\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Determines if a name is valid based on whitelist, restriction and takedown checks.\\n    /// @param name The name to validate.\\n    /// @return True if the name is valid.\\n    function isValid(string calldata name) public view returns (bool) {\\n        return isWordWhitelisted(name) && !isWordRestricted(name) && !isNameTakendown(name);\\n    }\\n\\n    // Characters whitelisting\\n\\n    /// @dev Checks if each character of a word is whitelisted.\\n    /// @param word The word to check.\\n    /// @return True if the word is made only of whitelisted characters.\\n    function isWordWhitelisted(string calldata word) public view returns (bool) {\\n        bytes memory wordBytes = bytes(word);\\n        for (uint32 i = 0; i < wordBytes.length; i++) {\\n            uint32 charCode = uint32(uint8(wordBytes[i]));\\n            if (!dataStore.isWhitelistCharacter(charCode)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    // Restricted words\\n\\n    /// @dev Adds words (without .jfin) to the list of restricted words.\\n    /// @param words Array of words to add to the restriction list.\\n    function addToRestrictWords(string[] calldata words) external onlyNameManager {\\n        for (uint i = 0; i < words.length; ++i) {\\n            bytes32 wordHash = keccak256(abi.encodePacked(words[i]));\\n            dataStore.addRestrictedWord(wordHash);\\n        }\\n    }\\n\\n    /// @dev Removes words (without .jfin) from the list of restricted words.\\n    /// @param words Array of words to remove from the restriction list.\\n    function removeFromRestrictWords(string[] calldata words) external onlyNameManager {\\n        for (uint i = 0; i < words.length; ++i) {\\n            bytes32 wordHash = keccak256(abi.encodePacked(words[i]));\\n            dataStore.removeRestrictedWord(wordHash);\\n        }\\n    }\\n\\n    /// @dev Retrieves the list of all restricted word hashes from the data store.\\n    /// @return An array of restricted word hashes.\\n    function hashedRestrictWords() public view returns (bytes32[] memory) {\\n        return dataStore.getHashedRestrictedWords();\\n    }\\n\\n    /// @dev Checks if a word (without .jfin) is currently marked as restricted.\\n    /// @param word The word to check.\\n    /// @return True if the word is on the restricted list.\\n    function isWordRestricted(string memory word) public view returns (bool) {\\n        return dataStore.isRestrictedWord(keccak256(abi.encodePacked(word)));\\n    }\\n\\n    // Takedown list\\n\\n    /// @dev Adds entries to the takedown list for both token ID and namehash.\\n    /// @param takedowns Array of takedown entries containing tokenId and namehash.\\n    function addToTakedownList(Takedown[] calldata takedowns) external onlyNameManager {\\n        for (uint i = 0; i < takedowns.length; ++i) {\\n            dataStore.addTakedown(bytes32(takedowns[i].tokenId));\\n            dataStore.addTakedown(keccak256(abi.encodePacked(takedowns[i].name)));\\n            dataStore.addTakedown(takedowns[i].namehash);\\n        }\\n    }\\n\\n    /// @dev Removes entries from the takedown list for both token ID and namehash.\\n    /// @param takedowns Array of takedown entries containing tokenId and namehash.\\n    function removeFromTakedownList(Takedown[] calldata takedowns) external onlyNameManager {\\n        for (uint i = 0; i < takedowns.length; ++i) {\\n            dataStore.removeTakedown(bytes32(takedowns[i].tokenId));\\n            dataStore.removeTakedown(keccak256(abi.encodePacked(takedowns[i].name)));\\n            dataStore.removeTakedown(takedowns[i].namehash);\\n        }\\n    }\\n\\n    /// @dev Retrieves the list of all takedown hashes from the data store.\\n    /// @return An array of takedown hashes.\\n    function hashedTakedownList() public view returns (bytes32[] memory) {\\n        return dataStore.getHashedTakenDownList();\\n    }\\n\\n    /// @dev Checks if a token ID is currently marked for takedown.\\n    /// @param tokenId The token ID to check.\\n    /// @return True if the token ID is on the takedown list.\\n    function isTokenIdTakendown(uint256 tokenId) public view returns (bool) {\\n        return dataStore.isTakedown(bytes32(tokenId));\\n    }\\n\\n    /// @dev Checks if a name is currently marked for takedown.\\n    /// @param name The original name to check (without .jfin).\\n    /// @return True if the name is on the takedown list.\\n    function isNameTakendown(string memory name) public view returns (bool) {\\n        return dataStore.isTakedown(keccak256(abi.encodePacked(name)));\\n    }\\n\\n    /// @dev Checks if a namehash is currently marked for takedown.\\n    /// @param namehash The hash of the name to check.\\n    /// @return True if the namehash is on the takedown list.\\n    function isNamehashTakendown(bytes32 namehash) public view returns (bool) {\\n        return dataStore.isTakedown(namehash);\\n    }\\n}\\n\",\"keccak256\":\"0x36c76c72c7738ea442122de9e917c67baa9c51a17b48b83e7bbbd2018f49bf9b\",\"license\":\"MIT\"},\"jns-admin-contract/contracts/NameManagerDataStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./IJNSAdminContract.sol\\\";\\n\\n/// @title Data Storage for JFIN Name Service Name Management\\n/// This contract handles storage and checks for whitelisted characters,\\n/// takedown hashes, and restricted words within a decentralized naming service.\\ncontract NameManagerDataStore {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 public constant NAME_MANAGER_ROLE = keccak256(\\\"NAME_MANAGER_ROLE\\\");\\n\\n    mapping(uint32 => bool) private whitelistCharacters;\\n    EnumerableSet.Bytes32Set private takedownSet;\\n    EnumerableSet.Bytes32Set private restrictWordSet;\\n\\n    IJNSAdminContract public adminContract;\\n\\n    /// @dev Constructor that initializes the name manager data store.\\n    /// @param _adminContractAddress The address of the admin contract.\\n    constructor(address _adminContractAddress) {\\n        adminContract = IJNSAdminContract(_adminContractAddress);\\n\\n        _whitelistCharactersAndNumbers();\\n    }\\n\\n    /// @dev Ensures that the caller has the Name Manager role.\\n    modifier onlyNameManager() {\\n        require(\\n            adminContract.hasRole(NAME_MANAGER_ROLE, msg.sender),\\n            \\\"Caller is not a name manager\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Adds a character to the whitelist.\\n    /// @param character The Unicode value of the character to whitelist.\\n    function addWhitelistCharacter(uint32 character) external onlyNameManager {\\n        whitelistCharacters[character] = true;\\n    }\\n\\n    /// @dev Removes a character from the whitelist.\\n    /// @param character The Unicode value of the character to remove.\\n    function removeWhitelistCharacter(uint32 character) external onlyNameManager {\\n        whitelistCharacters[character] = false;\\n    }\\n\\n    /// @dev Checks if a character is whitelisted.\\n    /// @param character The Unicode value of the character to check.\\n    /// @return True if the character is whitelisted.\\n    function isWhitelistCharacter(uint32 character) public view returns (bool) {\\n        return whitelistCharacters[character];\\n    }\\n\\n    /// @dev Adds a hash to the takedown set.\\n    /// @param hash The hash to add to the takedown list.\\n    function addTakedown(bytes32 hash) external onlyNameManager {\\n        takedownSet.add(hash);\\n    }\\n\\n    /// @dev Removes a hash from the takedown set.\\n    /// @param hash The hash to remove from the takedown list.\\n    function removeTakedown(bytes32 hash) external onlyNameManager {\\n        // if (!takedownSet.contains(hash))\\n        //     revert(\\\"takedown not found when remove\\\");\\n        takedownSet.remove(hash);\\n    }\\n\\n    /// @dev Adds a word hash to the restricted words set.\\n    /// @param hash The hash of the word to add to the restriction list.\\n    function addRestrictedWord(bytes32 hash) external onlyNameManager {\\n        restrictWordSet.add(hash);\\n    }\\n\\n    /// @dev Removes a word hash from the restricted words set.\\n    /// @param hash The hash of the word to remove from the restriction list.\\n    function removeRestrictedWord(bytes32 hash) external onlyNameManager {\\n        // if (!restrictWordSet.contains(hash))\\n        //     revert(\\\"restricted word not found when remove\\\");\\n        restrictWordSet.remove(hash);\\n    }\\n\\n    /// @dev Checks if a word hash is in the restricted words set.\\n    /// @param hash The hash of the word to check.\\n    /// @return True if the hash is in the restricted set.\\n    function isRestrictedWord(bytes32 hash) public view returns (bool) {\\n        return restrictWordSet.contains(hash);\\n    }\\n\\n    /// @dev Checks if a hash is in the takedown set.\\n    /// @param hash The hash to check.\\n    /// @return True if the hash is in the takedown list.\\n    function isTakedown(bytes32 hash) public view returns (bool) {\\n        return takedownSet.contains(hash);\\n    }\\n\\n    /// @dev Retrieves all hashes from the takedown set.\\n    /// @return An array of all takedown hashes.\\n    function getHashedTakenDownList() public view returns (bytes32[] memory) {\\n        return takedownSet.values();\\n    }\\n\\n    /// @dev Retrieves all word hashes from the restricted words set.\\n    /// @return An array of all restricted word hashes.\\n    function getHashedRestrictedWords() public view returns (bytes32[] memory) {\\n        return restrictWordSet.values();\\n    }\\n\\n    /// @dev Pre-populates the whitelist with alphanumeric characters.\\n    /// Private function called during contract initialization.\\n    function _whitelistCharactersAndNumbers() private {\\n        // Unicode values for '0' to '9' are 48 to 57\\n        for (uint32 i = 48; i <= 57; i++) {\\n            whitelistCharacters[i] = true;\\n        }\\n        // Unicode values for 'a' to 'z' are 97 to 122\\n        for (uint32 i = 97; i <= 122; i++) {\\n            whitelistCharacters[i] = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x708b51ad8485c83a49bbedf8c3bf791bc75cdf51925592d15b137d00ea7f5cf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161144538038061144583398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b611387806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638014a0721161008c578063c05c5e9411610066578063c05c5e94146101d5578063eb00d16414610200578063f1dfaefb14610213578063f824dc0b1461022657600080fd5b80638014a072146101af5780638c6e9d66146101c2578063aee6ac6f146101af57600080fd5b806355859649116100c85780635585964914610161578063564bb6351461017657806362646593146101895780637e9ac7e11461019c57600080fd5b806314fb7f81146100ef5780631be0e1951461011757806343db268d1461014c575b600080fd5b6101026100fd366004610f89565b61022e565b60405190151581526020015b60405180910390f35b61013e7f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d81565b60405190815260200161010e565b6101546102d0565b60405161010e919061101e565b61017461016f3660046110ae565b610360565b005b6101746101843660046110ae565b610648565b6101026101973660046110f0565b610926565b6101746101aa3660046110ae565b610a4a565b6101026101bd366004611162565b610c0a565b6101746101d03660046110ae565b610c55565b6000546101e8906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61010261020e366004610f89565b610e15565b6101026102213660046110f0565b610e3c565b610154610edf565b6001546040516000916001600160a01b031690630393533e9061025590859060200161117b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161028991815260200190565b602060405180830381865afa1580156102a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ca91906111aa565b92915050565b600154604080517fea8fc60000000000000000000000000000000000000000000000000000000000815290516060926001600160a01b03169163ea8fc6009160048083019260009291908290030181865afa158015610333573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261035b91908101906111cc565b905090565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f291906111aa565b6104435760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e616765720000000060448201526064015b60405180910390fd5b60005b81811015610643576001546001600160a01b0316638dc465b284848481811061047157610471611272565b90506020028101906104839190611288565b60405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815290356004820152602401600060405180830381600087803b1580156104d357600080fd5b505af11580156104e7573d6000803e3d6000fd5b50506001546001600160a01b03169150638dc465b2905084848481811061051057610510611272565b90506020028101906105229190611288565b6105309060208101906112a8565b6040516020016105419291906112ef565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161057591815260200190565b600060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b50506001546001600160a01b03169150638dc465b290508484848181106105cc576105cc611272565b90506020028101906105de9190611288565b604001356040518263ffffffff1660e01b815260040161060091815260200190565b600060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050508061063c90611315565b9050610446565b505050565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da91906111aa565b6107265760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e6167657200000000604482015260640161043a565b60005b81811015610643576001546001600160a01b031663610ece9584848481811061075457610754611272565b90506020028101906107669190611288565b60405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815290356004820152602401600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b50506001546001600160a01b0316915063610ece9590508484848181106107f3576107f3611272565b90506020028101906108059190611288565b6108139060208101906112a8565b6040516020016108249291906112ef565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161085891815260200190565b600060405180830381600087803b15801561087257600080fd5b505af1158015610886573d6000803e3d6000fd5b50506001546001600160a01b0316915063610ece9590508484848181106108af576108af611272565b90506020028101906108c19190611288565b604001356040518263ffffffff1660e01b81526004016108e391815260200190565b600060405180830381600087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b505050508061091f90611315565b9050610729565b60008083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b81518163ffffffff161015610a3f576000828263ffffffff168151811061098b5761098b611272565b01602001516001546040517f165c05ad00000000000000000000000000000000000000000000000000000000815260f89290921c6004830181905292506001600160a01b03169063165c05ad90602401602060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c91906111aa565b610a2c57600093505050506102ca565b5080610a378161132e565b915050610962565b506001949350505050565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906111aa565b610b285760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e6167657200000000604482015260640161043a565b60005b81811015610643576000838383818110610b4757610b47611272565b9050602002810190610b5991906112a8565b604051602001610b6a9291906112ef565b60408051808303601f190181529082905280516020909101206001547f8aba607d000000000000000000000000000000000000000000000000000000008352600483018290529092506001600160a01b031690638aba607d90602401600060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b505050505080610c0390611315565b9050610b2b565b6001546040517f0393533e000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690630393533e90602401610289565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce791906111aa565b610d335760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e6167657200000000604482015260640161043a565b60005b81811015610643576000838383818110610d5257610d52611272565b9050602002810190610d6491906112a8565b604051602001610d759291906112ef565b60408051808303601f190181529082905280516020909101206001547fe1e403e1000000000000000000000000000000000000000000000000000000008352600483018290529092506001600160a01b03169063e1e403e190602401600060405180830381600087803b158015610deb57600080fd5b505af1158015610dff573d6000803e3d6000fd5b505050505080610e0e90611315565b9050610d36565b6001546040516000916001600160a01b03169063deb68ebd9061025590859060200161117b565b6000610e488383610926565b8015610e905750610e8e83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e1592505050565b155b8015610ed85750610ed683838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061022e92505050565b155b9392505050565b600154604080517f25f6748500000000000000000000000000000000000000000000000000000000815290516060926001600160a01b0316916325f674859160048083019260009291908290030181865afa158015610333573d6000803e3d6000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f8157610f81610f42565b604052919050565b60006020808385031215610f9c57600080fd5b823567ffffffffffffffff80821115610fb457600080fd5b818501915085601f830112610fc857600080fd5b813581811115610fda57610fda610f42565b610fec601f8201601f19168501610f58565b9150808252868482850101111561100257600080fd5b8084840185840137600090820190930192909252509392505050565b6020808252825182820181905260009190848201906040850190845b818110156110565783518352928401929184019160010161103a565b50909695505050505050565b60008083601f84011261107457600080fd5b50813567ffffffffffffffff81111561108c57600080fd5b6020830191508360208260051b85010111156110a757600080fd5b9250929050565b600080602083850312156110c157600080fd5b823567ffffffffffffffff8111156110d857600080fd5b6110e485828601611062565b90969095509350505050565b6000806020838503121561110357600080fd5b823567ffffffffffffffff8082111561111b57600080fd5b818501915085601f83011261112f57600080fd5b81358181111561113e57600080fd5b86602082850101111561115057600080fd5b60209290920196919550909350505050565b60006020828403121561117457600080fd5b5035919050565b6000825160005b8181101561119c5760208186018101518583015201611182565b506000920191825250919050565b6000602082840312156111bc57600080fd5b81518015158114610ed857600080fd5b600060208083850312156111df57600080fd5b825167ffffffffffffffff808211156111f757600080fd5b818501915085601f83011261120b57600080fd5b81518181111561121d5761121d610f42565b8060051b915061122e848301610f58565b818152918301840191848101908884111561124857600080fd5b938501935b838510156112665784518252938501939085019061124d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261129e57600080fd5b9190910192915050565b6000808335601e198436030181126112bf57600080fd5b83018035915067ffffffffffffffff8211156112da57600080fd5b6020019150368190038213156110a757600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611327576113276112ff565b5060010190565b600063ffffffff808316818103611347576113476112ff565b600101939250505056fea264697066735822122070d068c349857945fb52e54d3d3cc131cb6d5b1b94ae58eeb091bb2cda4da88f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638014a0721161008c578063c05c5e9411610066578063c05c5e94146101d5578063eb00d16414610200578063f1dfaefb14610213578063f824dc0b1461022657600080fd5b80638014a072146101af5780638c6e9d66146101c2578063aee6ac6f146101af57600080fd5b806355859649116100c85780635585964914610161578063564bb6351461017657806362646593146101895780637e9ac7e11461019c57600080fd5b806314fb7f81146100ef5780631be0e1951461011757806343db268d1461014c575b600080fd5b6101026100fd366004610f89565b61022e565b60405190151581526020015b60405180910390f35b61013e7f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d81565b60405190815260200161010e565b6101546102d0565b60405161010e919061101e565b61017461016f3660046110ae565b610360565b005b6101746101843660046110ae565b610648565b6101026101973660046110f0565b610926565b6101746101aa3660046110ae565b610a4a565b6101026101bd366004611162565b610c0a565b6101746101d03660046110ae565b610c55565b6000546101e8906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61010261020e366004610f89565b610e15565b6101026102213660046110f0565b610e3c565b610154610edf565b6001546040516000916001600160a01b031690630393533e9061025590859060200161117b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161028991815260200190565b602060405180830381865afa1580156102a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ca91906111aa565b92915050565b600154604080517fea8fc60000000000000000000000000000000000000000000000000000000000815290516060926001600160a01b03169163ea8fc6009160048083019260009291908290030181865afa158015610333573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261035b91908101906111cc565b905090565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f291906111aa565b6104435760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e616765720000000060448201526064015b60405180910390fd5b60005b81811015610643576001546001600160a01b0316638dc465b284848481811061047157610471611272565b90506020028101906104839190611288565b60405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815290356004820152602401600060405180830381600087803b1580156104d357600080fd5b505af11580156104e7573d6000803e3d6000fd5b50506001546001600160a01b03169150638dc465b2905084848481811061051057610510611272565b90506020028101906105229190611288565b6105309060208101906112a8565b6040516020016105419291906112ef565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161057591815260200190565b600060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b50506001546001600160a01b03169150638dc465b290508484848181106105cc576105cc611272565b90506020028101906105de9190611288565b604001356040518263ffffffff1660e01b815260040161060091815260200190565b600060405180830381600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050508061063c90611315565b9050610446565b505050565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da91906111aa565b6107265760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e6167657200000000604482015260640161043a565b60005b81811015610643576001546001600160a01b031663610ece9584848481811061075457610754611272565b90506020028101906107669190611288565b60405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815290356004820152602401600060405180830381600087803b1580156107b657600080fd5b505af11580156107ca573d6000803e3d6000fd5b50506001546001600160a01b0316915063610ece9590508484848181106107f3576107f3611272565b90506020028101906108059190611288565b6108139060208101906112a8565b6040516020016108249291906112ef565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161085891815260200190565b600060405180830381600087803b15801561087257600080fd5b505af1158015610886573d6000803e3d6000fd5b50506001546001600160a01b0316915063610ece9590508484848181106108af576108af611272565b90506020028101906108c19190611288565b604001356040518263ffffffff1660e01b81526004016108e391815260200190565b600060405180830381600087803b1580156108fd57600080fd5b505af1158015610911573d6000803e3d6000fd5b505050508061091f90611315565b9050610729565b60008083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394505050505b81518163ffffffff161015610a3f576000828263ffffffff168151811061098b5761098b611272565b01602001516001546040517f165c05ad00000000000000000000000000000000000000000000000000000000815260f89290921c6004830181905292506001600160a01b03169063165c05ad90602401602060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c91906111aa565b610a2c57600093505050506102ca565b5080610a378161132e565b915050610962565b506001949350505050565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adc91906111aa565b610b285760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e6167657200000000604482015260640161043a565b60005b81811015610643576000838383818110610b4757610b47611272565b9050602002810190610b5991906112a8565b604051602001610b6a9291906112ef565b60408051808303601f190181529082905280516020909101206001547f8aba607d000000000000000000000000000000000000000000000000000000008352600483018290529092506001600160a01b031690638aba607d90602401600060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b505050505080610c0390611315565b9050610b2b565b6001546040517f0393533e000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b031690630393533e90602401610289565b600054604051632474521560e21b81527f6ae19fd703cb304b53d5f09f6a0ce96b7c6a7edd912859ca6c4ed719bcab610d60048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce791906111aa565b610d335760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f742061206e616d65206d616e6167657200000000604482015260640161043a565b60005b81811015610643576000838383818110610d5257610d52611272565b9050602002810190610d6491906112a8565b604051602001610d759291906112ef565b60408051808303601f190181529082905280516020909101206001547fe1e403e1000000000000000000000000000000000000000000000000000000008352600483018290529092506001600160a01b03169063e1e403e190602401600060405180830381600087803b158015610deb57600080fd5b505af1158015610dff573d6000803e3d6000fd5b505050505080610e0e90611315565b9050610d36565b6001546040516000916001600160a01b03169063deb68ebd9061025590859060200161117b565b6000610e488383610926565b8015610e905750610e8e83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e1592505050565b155b8015610ed85750610ed683838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061022e92505050565b155b9392505050565b600154604080517f25f6748500000000000000000000000000000000000000000000000000000000815290516060926001600160a01b0316916325f674859160048083019260009291908290030181865afa158015610333573d6000803e3d6000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f8157610f81610f42565b604052919050565b60006020808385031215610f9c57600080fd5b823567ffffffffffffffff80821115610fb457600080fd5b818501915085601f830112610fc857600080fd5b813581811115610fda57610fda610f42565b610fec601f8201601f19168501610f58565b9150808252868482850101111561100257600080fd5b8084840185840137600090820190930192909252509392505050565b6020808252825182820181905260009190848201906040850190845b818110156110565783518352928401929184019160010161103a565b50909695505050505050565b60008083601f84011261107457600080fd5b50813567ffffffffffffffff81111561108c57600080fd5b6020830191508360208260051b85010111156110a757600080fd5b9250929050565b600080602083850312156110c157600080fd5b823567ffffffffffffffff8111156110d857600080fd5b6110e485828601611062565b90969095509350505050565b6000806020838503121561110357600080fd5b823567ffffffffffffffff8082111561111b57600080fd5b818501915085601f83011261112f57600080fd5b81358181111561113e57600080fd5b86602082850101111561115057600080fd5b60209290920196919550909350505050565b60006020828403121561117457600080fd5b5035919050565b6000825160005b8181101561119c5760208186018101518583015201611182565b506000920191825250919050565b6000602082840312156111bc57600080fd5b81518015158114610ed857600080fd5b600060208083850312156111df57600080fd5b825167ffffffffffffffff808211156111f757600080fd5b818501915085601f83011261120b57600080fd5b81518181111561121d5761121d610f42565b8060051b915061122e848301610f58565b818152918301840191848101908884111561124857600080fd5b938501935b838510156112665784518252938501939085019061124d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e1983360301811261129e57600080fd5b9190910192915050565b6000808335601e198436030181126112bf57600080fd5b83018035915067ffffffffffffffff8211156112da57600080fd5b6020019150368190038213156110a757600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611327576113276112ff565b5060010190565b600063ffffffff808316818103611347576113476112ff565b600101939250505056fea264697066735822122070d068c349857945fb52e54d3d3cc131cb6d5b1b94ae58eeb091bb2cda4da88f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToRestrictWords(string[])": {
        "details": "Adds words (without .jfin) to the list of restricted words.",
        "params": {
          "words": "Array of words to add to the restriction list."
        }
      },
      "addToTakedownList((uint256,string,bytes32)[])": {
        "details": "Adds entries to the takedown list for both token ID and namehash.",
        "params": {
          "takedowns": "Array of takedown entries containing tokenId and namehash."
        }
      },
      "constructor": {
        "details": "Initializes contract with addresses of admin and data storage contracts. Also pre-populates the whitelist with characters and numbers.",
        "params": {
          "_adminContractAddress": "Address of the admin contract.",
          "_dataStoreAddress": "Address of the data storage contract."
        }
      },
      "hashedRestrictWords()": {
        "details": "Retrieves the list of all restricted word hashes from the data store.",
        "returns": {
          "_0": "An array of restricted word hashes."
        }
      },
      "hashedTakedownList()": {
        "details": "Retrieves the list of all takedown hashes from the data store.",
        "returns": {
          "_0": "An array of takedown hashes."
        }
      },
      "isNameTakendown(string)": {
        "details": "Checks if a name is currently marked for takedown.",
        "params": {
          "name": "The original name to check (without .jfin)."
        },
        "returns": {
          "_0": "True if the name is on the takedown list."
        }
      },
      "isNamehashTakendown(bytes32)": {
        "details": "Checks if a namehash is currently marked for takedown.",
        "params": {
          "namehash": "The hash of the name to check."
        },
        "returns": {
          "_0": "True if the namehash is on the takedown list."
        }
      },
      "isTokenIdTakendown(uint256)": {
        "details": "Checks if a token ID is currently marked for takedown.",
        "params": {
          "tokenId": "The token ID to check."
        },
        "returns": {
          "_0": "True if the token ID is on the takedown list."
        }
      },
      "isValid(string)": {
        "details": "Determines if a name is valid based on whitelist, restriction and takedown checks.",
        "params": {
          "name": "The name to validate."
        },
        "returns": {
          "_0": "True if the name is valid."
        }
      },
      "isWordRestricted(string)": {
        "details": "Checks if a word (without .jfin) is currently marked as restricted.",
        "params": {
          "word": "The word to check."
        },
        "returns": {
          "_0": "True if the word is on the restricted list."
        }
      },
      "isWordWhitelisted(string)": {
        "details": "Checks if each character of a word is whitelisted.",
        "params": {
          "word": "The word to check."
        },
        "returns": {
          "_0": "True if the word is made only of whitelisted characters."
        }
      },
      "removeFromRestrictWords(string[])": {
        "details": "Removes words (without .jfin) from the list of restricted words.",
        "params": {
          "words": "Array of words to remove from the restriction list."
        }
      },
      "removeFromTakedownList((uint256,string,bytes32)[])": {
        "details": "Removes entries from the takedown list for both token ID and namehash.",
        "params": {
          "takedowns": "Array of takedown entries containing tokenId and namehash."
        }
      }
    },
    "title": "Name Management for a JFIN Name Service",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30449,
        "contract": "jns-admin-contract/contracts/NameManager.sol:NameManager",
        "label": "adminContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IJNSAdminContract)30008"
      },
      {
        "astId": 30452,
        "contract": "jns-admin-contract/contracts/NameManager.sol:NameManager",
        "label": "dataStore",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NameManagerDataStore)31110"
      }
    ],
    "types": {
      "t_contract(IJNSAdminContract)30008": {
        "encoding": "inplace",
        "label": "contract IJNSAdminContract",
        "numberOfBytes": "20"
      },
      "t_contract(NameManagerDataStore)31110": {
        "encoding": "inplace",
        "label": "contract NameManagerDataStore",
        "numberOfBytes": "20"
      }
    }
  }
}